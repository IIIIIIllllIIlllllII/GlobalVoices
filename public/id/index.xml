<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contoh</title>
    <link>http://localhost:1313/hugo-brewm/id/</link>
    <description>Artikel Terbaru pada Contoh</description>
    <generator>Hugo 0.148.2</generator>
    <language>id-ID</language>
    <managingEditor>Author Name</managingEditor>
    
      <webMaster>Author Name</webMaster>
    <lastBuildDate>Mon, 04 Aug 2025 18:16:45 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/hugo-brewm/id/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Menambahkan Gambar Sampul dan Artikel Audio</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-sampul-dan-audio/</link>
      <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-sampul-dan-audio/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      <enclosure url="https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_and_styrofoam_%E2%80%93_electrostatic_charge_%28235112299%29.jpg" length="0" type="image/jpeg" />
    </item>
    <item>
      <title>Mengatur Entri `Terms`</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-entri-terms/</link>
      <pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-entri-terms/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
    <item>
      <title>Mengatur Riwayat Redaksi</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-riwayat-redaksi/</link>
      <pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-riwayat-redaksi/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
    <item>
      <title>Menambahkan Diskusi</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-diskusi/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-diskusi/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
    <item>
      <title>Mengatur Logo dan Aksen Warna</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-logo-dan-aksen-warna/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-logo-dan-aksen-warna/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
    <item>
      <title>Mengatur Menu</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-menu/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-menu/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
    <item>
      <title>Mengatur Pagefind</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-pagefind/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-pagefind/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
    <item>
      <title>Mengatur Slide Beranda</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/mengatur-slide/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/mengatur-slide/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
    <item>
      <title>Tes Markdown</title>
      <link>http://localhost:1313/hugo-brewm/id/pos/tes-markdown/</link>
      <pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate>
      <author>Author Name</author>
      <guid>http://localhost:1313/hugo-brewm/id/pos/tes-markdown/</guid>
      <description>&lt;h1 id=&#34;jadi-ini-hero-section&#34;&gt;Jadi, Ini &lt;em&gt;Hero Section&lt;/em&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;Ya, sama seperti &lt;em&gt;slide&lt;/em&gt;, silakan sesuaikan setiap &lt;code&gt;_index.md&lt;/code&gt;, seperti menambahkan &lt;em&gt;shortcode&lt;/em&gt; atau kode lainnya:&lt;/p&gt;&#xA;&lt;div id=&#34;network-graph&#34;&#xD;&#xA;    data-title=&#34;Grafik jaringan pada situs Bahasa Inggris&#34;&#xD;&#xA;    data-source=&#34;https://foxihd.github.io/hugo-brewm/en/index.json&#34;&#xD;&#xA;    style=&#34;height: 400px;&#34;&gt;&#xD;&#xA;    &lt;script src=&#34;https://d3js.org/d3.v7.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;script&gt;&#xD;&#xA;        const ngSty = document.createElement(&#39;style&#39;);&#xD;&#xA;        ngSty.textContent = `&#xD;&#xA;            #network-graph{ overflow: hidden;}&#xD;&#xA;            .link{ stroke: var(--mid); stroke-width: 1pt;}&#xD;&#xA;            .node{ cursor: pointer; fill: none; stroke: var(--ac); stroke-width: 1pt;}&#xD;&#xA;            .node.post{ fill: var(--ac); stroke: none;}&#xD;&#xA;            .node.tags{ stroke-dasharray: 1pt;}&#xD;&#xA;            .nodes text{ opacity: 0.5; font-size: 7pt; fill: var(--fg);}&#xD;&#xA;            .node:hover{ transform: scale(1.5);}&#xD;&#xA;            .node:hover + text{ opacity: 1; font-size: 8pt;}&#xD;&#xA;            @media only screen and (min-width: 480px) {.hero &gt; #network-graph, #network-graph + .hero__content{width:50%}}&#xD;&#xA;        `&#xD;&#xA;        document.head.appendChild(ngSty);&#xD;&#xA;        const container = document.getElementById(&#34;network-graph&#34;);&#xD;&#xA;        const width = container.getBoundingClientRect().width;&#xD;&#xA;        const height = container.getBoundingClientRect().height;&#xD;&#xA;        const svg = d3.select(&#34;#network-graph&#34;)&#xD;&#xA;            .append(&#34;svg&#34;)&#xD;&#xA;                .attr(&#34;id&#34;, &#34;network-graph-svg&#34;)&#xD;&#xA;                .attr(&#34;width&#34;, width)&#xD;&#xA;                .attr(&#34;height&#34;, height)&#xD;&#xA;                .attr(&#34;pointer-events&#34;, &#34;all&#34;)&#xD;&#xA;                .call(d3.zoom().on(&#34;zoom&#34;, redraw));&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;title&#34;)&#xD;&#xA;            .text(container.dataset.title);&#xD;&#xA;&#xD;&#xA;        svg.append(&#34;rect&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;placeholder&#34;)&#xD;&#xA;            .attr(&#34;width&#34;, width)&#xD;&#xA;            .attr(&#34;height&#34;, height)&#xD;&#xA;            .attr(&#34;fill&#34;, &#34;none&#34;);&#xD;&#xA;&#xD;&#xA;        const vis = svg.append(&#34;g&#34;)&#xD;&#xA;            .attr(&#34;id&#34;, &#34;network-graph-data&#34;);&#xD;&#xA;&#xD;&#xA;        function redraw(event) {&#xD;&#xA;            vis.attr(&#34;transform&#34;,&#xD;&#xA;                &#34;translate(&#34; + event.transform.x + &#34;,&#34; + event.transform.y + &#34;)&#34;&#xD;&#xA;                + &#34; scale(&#34; + event.transform.k + &#34;)&#34;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const simulation = d3.forceSimulation()&#xD;&#xA;            .force(&#34;link&#34;, d3.forceLink().id(d =&gt; d.id))&#xD;&#xA;            .force(&#34;charge&#34;, d3.forceManyBody())&#xD;&#xA;            .force(&#34;center&#34;, d3.forceCenter(width / 2, height / 2));&#xD;&#xA;&#xD;&#xA;        d3.json(container.dataset.source).then(function(graph) {&#xD;&#xA;            const link = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;links&#34;)&#xD;&#xA;                .selectAll(&#34;line&#34;)&#xD;&#xA;                .data(graph.links)&#xD;&#xA;                .enter().append(&#34;line&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;link&#34;);&#xD;&#xA;&#xD;&#xA;            const node = vis.append(&#34;g&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, &#34;nodes&#34;)&#xD;&#xA;                .selectAll(&#34;g&#34;)&#xD;&#xA;                .data(graph.nodes)&#xD;&#xA;                .enter().append(&#34;g&#34;);&#xD;&#xA;&#xD;&#xA;            const title = node.append(&#34;title&#34;)&#xD;&#xA;                .text(d =&gt; d.title);&#xD;&#xA;&#xD;&#xA;            const circles = node.append(&#34;circle&#34;)&#xD;&#xA;                .attr(&#34;class&#34;, d =&gt; &#34;node &#34; + d.type)&#xD;&#xA;                .attr(&#34;r&#34;, 5)&#xD;&#xA;                .on(&#34;click&#34;, (event, d) =&gt; {&#xD;&#xA;                    window.location.href = d.permalink;&#xD;&#xA;                })&#xD;&#xA;                .call(d3.drag()&#xD;&#xA;                    .on(&#34;start&#34;, dragstarted)&#xD;&#xA;                    .on(&#34;drag&#34;, dragged)&#xD;&#xA;                    .on(&#34;end&#34;, dragended));&#xD;&#xA;&#xD;&#xA;            const labels = node.append(&#34;text&#34;)&#xD;&#xA;                .text(d =&gt; d.title)&#xD;&#xA;                .attr(&#34;x&#34;, 9)&#xD;&#xA;                .attr(&#34;y&#34;, 3);&#xD;&#xA;&#xD;&#xA;            simulation&#xD;&#xA;                .nodes(graph.nodes)&#xD;&#xA;                .on(&#34;tick&#34;, ticked);&#xD;&#xA;&#xD;&#xA;            simulation.force(&#34;link&#34;)&#xD;&#xA;                .links(graph.links);&#xD;&#xA;&#xD;&#xA;            function ticked() {&#xD;&#xA;                link&#xD;&#xA;                    .attr(&#34;x1&#34;, d =&gt; d.source.x)&#xD;&#xA;                    .attr(&#34;y1&#34;, d =&gt; d.source.y)&#xD;&#xA;                    .attr(&#34;x2&#34;, d =&gt; d.target.x)&#xD;&#xA;                    .attr(&#34;y2&#34;, d =&gt; d.target.y);&#xD;&#xA;&#xD;&#xA;                node&#xD;&#xA;                    .attr(&#34;transform&#34;, d =&gt; `translate(${d.x},${d.y})`);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        function dragstarted(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0.3).restart();&#xD;&#xA;            d.fx = d.x;&#xD;&#xA;            d.fy = d.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragged(event, d) {&#xD;&#xA;            d.fx = event.x;&#xD;&#xA;            d.fy = event.y;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        function dragended(event, d) {&#xD;&#xA;            if (!event.active) simulation.alphaTarget(0);&#xD;&#xA;            d.fx = null;&#xD;&#xA;            d.fy = null;&#xD;&#xA;        }&#xD;&#xA;    &lt;/script&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;noscript&gt;Javascript nonaktif&lt;/noscript&gt;&lt;/p&gt;</description>
      
    </item>
  </channel>
</rss>